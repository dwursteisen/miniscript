import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
	}
}

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "io.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'org.mini2Dx'
		username = ossrhUser
		password = ossrhPassword
	}
}

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: "java"
	apply plugin: "signing"
	apply plugin: "maven"
	
	group = 'org.mini2Dx'
	version = '1.0.0-SNAPSHOT'

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://mini2dx.org/maven/content/repositories/thirdparty" }
	}
	
	ext {
		jythonVersion='2.5.3'
		groovyVersion='2.4.6'
		jrubyVersion='9.1.0.0'
		luajVersion='3.0.1'
		
		junitVersion='4.11'
		jmockVersion='2.5.1'
	}
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	configurations {
		testOutput.extendsFrom (testCompile)
	}
	
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task testJar(type: Jar, dependsOn: testClasses) {
		from sourceSets.test.output
		classifier = 'test'
	}

	artifacts {
		archives javadocJar, sourcesJar, testJar
		testOutput testJar
	}
	
	// Maven Central publication
	if(project.hasProperty('ossrhUser')) {
		signing {
			sign configurations.archives
		}
		
		uploadArchives {
			repositories {
				mavenDeployer {
					// POM signature
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
					// Target repository
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUser, password: ossrhPassword)
					}
					pom.project {
						name project.name
						description project.description
						packaging 'jar'
						url 'https://github.com/mini2Dx/miniscript'
	
						scm {
							connection 'scm:git:https://github.com/mini2Dx/miniscript.git'
							developerConnection 'scm:git:git@github.com:mini2Dx/miniscript.git'
							url 'https://github.com/mini2Dx/miniscript.git'
						}
	
						licenses {
							license {
								name 'The MIT License (MIT)'
								url 'https://opensource.org/licenses/MIT'
								distribution 'repo'
							}
						}
	
						developers {
							developer {
								id = 'tomcashman'
								name = 'Thomas Cashman'
								email = 'thomascashman404@gmail.com'
							}
						}
					}
				}
			}
		}
	}
}

def docProjects() {
	subprojects.findAll { !it.name.contains('uat') }
}

project(":" + rootProject.name + "-core") {	
	description = "miniscript core library"
	
	dependencies {
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
	}
	
	task docs(type: Javadoc) {
		source docProjects().collect {p -> p.sourceSets.main.allJava }
		classpath = files(docProjects().collect {p -> p.sourceSets.main.compileClasspath})
		destinationDir = new File(project.parent.projectDir, 'docs')
	}
	docs.dependsOn docProjects().build
}

project(":" + rootProject.name + "-groovy") {
	description = "miniscript Groovy-based scripting"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
	
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
	}
}

project(":" + rootProject.name + "-lua") {
	description = "miniscript Lua-based scripting"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "org.luaj:luaj-jse:$luajVersion"
	
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
	}
}

project(":" + rootProject.name + "-ruby") {
	description = "miniscript Ruby-based scripting"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "org.jruby:jruby-complete:$jrubyVersion"
	
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
	}
}

project(":" + rootProject.name + "-python") {
	description = "miniscript Python-based scripting"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "org.python:jython-standalone:$jythonVersion"
	
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
